<launch>

  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="headless" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find crumb_gazebo)/worlds/crumb.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  
  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
  <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro.py '$(find crumb_description)/urdf/crumb.xacro'" />
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model crumb -param robot_description"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
  respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="30.0" />

    <remap from="/joint_states" to="/joint_states" />
  </node>


  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find crumb_control)/config/crumb_control.yaml" command="load"/>

<!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	output="screen" args="joint_state_controller
					  arm_1_joint
					  arm_2_joint
					  arm_3_joint
					  gripper_1_joint
					  arm_4_joint
					  arm_5_joint"/>


  <node pkg="crumb_gazebo" name="noise" type="noise">
    <param name="exist_noise" type="int" value="0"/>
  </node>

  <node pkg="crumb_listener" name="crumb_listener_gazebo" type="crumb_listener_gazebo"/>

  <node pkg="crumb_gazebo" name="imu_data_raw" type="imu_data_raw"/>

  <node pkg="crumb_gazebo" name="led" type="led"/>

  <node pkg="crumb_gazebo" name="wheel_drop" type="wheel_drop"/>

  <node pkg="crumb_gazebo" name="core" type="core"/>



</launch>
